<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<title>PrayTimes - Commitdiff - ViewGit</title>
	<link rel="stylesheet" href="default.css" type="text/css" />
	<link rel="icon" type="image/png" href="favicon.png" />
	<link rel="alternate" type="application/rss+xml" title="PrayTimes log" href="?a=rss-log&amp;p=PrayTimes" />
	<meta name="generator" content="ViewGit" />
</head>
<body>


<div class="nav">
<a href=".">Index</a>
 &raquo; <a href="?a=summary&amp;p=PrayTimes">PrayTimes</a> : Commitdiff 83794f</div>
<div id="page_body">

<div class="pagenav">
<a href="?a=summary&amp;p=PrayTimes">Summary</a> | <a href="?a=shortlog&amp;p=PrayTimes">Shortlog</a> | <a href="?a=commit&amp;p=PrayTimes&amp;h=83794f8a92f653d9df2f6c6b9eabed8eb7cd1b22">Commit</a> | <span class="cur"><a href="?a=commitdiff&amp;p=PrayTimes&amp;h=83794f8a92f653d9df2f6c6b9eabed8eb7cd1b22">Commitdiff</a></span> | <a href="?a=tree&amp;p=PrayTimes&amp;h=2e5a0e394ef7d317fad1efb5928b87d5a5a194c1&amp;hb=83794f8a92f653d9df2f6c6b9eabed8eb7cd1b22">Tree</a> | 
<form action="?" method="get" class="search">
<input type="hidden" name="a" value="search" />
<input type="hidden" name="p" value="PrayTimes" />
<input type="hidden" name="h" value="83794f8a92f653d9df2f6c6b9eabed8eb7cd1b22" />
<select name="st">
	<option>commit</option>
	<option>change</option>
	<option>author</option>
	<option>committer</option>
</select>
<input type="text" name="s" />
</form>
</div>

<h1>C++ code v1.0 added</h1>

<div class="authorinfo">
<a href="?a=search&amp;p=PrayTimes&amp;h=HEAD&amp;st=author&amp;s=Hamid">Hamid</a> [2011-03-14 07:34:43]</div>

<div class="commitmessage">
<pre>
C++ code v1.0 added
</pre>
</div>

<div class="filelist">
<table>
<thead>
<tr>
	<th>Filename</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="#v1%2Fcpp%2FCMakeLists.txt">v1/cpp/CMakeLists.txt</a></td><td></td></tr>
<tr>
<td><a href="#v1%2Fcpp%2Fprayertimes.cpp">v1/cpp/prayertimes.cpp</a></td><td></td></tr>
<tr>
<td><a href="#v1%2Fcpp%2Fprayertimes.hpp">v1/cpp/prayertimes.hpp</a></td><td></td></tr>
</tbody>
</table>
</div>

<div class="diff">
<pre>
<span class="diffline"><a name="v1%2Fcpp%2FCMakeLists.txt">diff --git a/v1/cpp/CMakeLists.txt b/v1/cpp/CMakeLists.txt</a></span>
<span class="etc">new file mode 100644</span>
<span class="etc">index 0000000..cc166a5</span>
<span class="del">--- /dev/null</span>
<span class="add">+++ b/v1/cpp/CMakeLists.txt</span>
<span class="pos">@@ -0,0 +1,7 @@</span>
<span class="add">+cmake_minimum_required(VERSION 2.6)</span>
<span class="add">+</span>
<span class="add">+project(prayertimes)</span>
<span class="add">+</span>
<span class="add">+add_executable(prayertimes prayertimes.cpp)</span>
<span class="add">+</span>
<span class="add">+add_definitions(-Wall)</span>
<span class="diffline"><a name="v1%2Fcpp%2Fprayertimes.cpp">diff --git a/v1/cpp/prayertimes.cpp b/v1/cpp/prayertimes.cpp</a></span>
<span class="etc">new file mode 100644</span>
<span class="etc">index 0000000..431dfe1</span>
<span class="del">--- /dev/null</span>
<span class="add">+++ b/v1/cpp/prayertimes.cpp</span>
<span class="pos">@@ -0,0 +1,298 @@</span>
<span class="add">+/*-------------------- In the name of God ----------------------*\</span>
<span class="add">+</span>
<span class="add">+    PrayerTimes 0.3</span>
<span class="add">+    Islamic prayer times calculator</span>
<span class="add">+</span>
<span class="add">+Developed by:</span>
<span class="add">+  Mohammad Ebrahim Mohammadi Panah &lt;ebrahim at mohammadi dot ir&gt;</span>
<span class="add">+</span>
<span class="add">+------------------------------------------------------------------</span>
<span class="add">+</span>
<span class="add">+Copyright 2009, Mohammad Ebrahim Mohammadi Panah</span>
<span class="add">+</span>
<span class="add">+This program is free software; you can redistribute it and/or</span>
<span class="add">+modify it under the terms of the GNU General Public License</span>
<span class="add">+as published by the Free Software Foundation; either version 2</span>
<span class="add">+of the License, or (at your option) any later version.</span>
<span class="add">+</span>
<span class="add">+This program is distributed in the hope that it will be useful,</span>
<span class="add">+but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<span class="add">+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<span class="add">+GNU General Public License for more details.</span>
<span class="add">+</span>
<span class="add">+You can get a copy of the GNU General Public License from</span>
<span class="add">+http://www.gnu.org/copyleft/gpl.html</span>
<span class="add">+</span>
<span class="add">+\*--------------------------------------------------------------*/</span>
<span class="add">+</span>
<span class="add">+#include &lt;ctime&gt;</span>
<span class="add">+#include &lt;cmath&gt;</span>
<span class="add">+#include &lt;cstring&gt;</span>
<span class="add">+#include &lt;unistd.h&gt;</span>
<span class="add">+#include &lt;getopt.h&gt;</span>
<span class="add">+</span>
<span class="add">+#include "prayertimes.hpp"</span>
<span class="add">+</span>
<span class="add">+#define PROG_NAME "prayertimes"</span>
<span class="add">+#define PROG_NAME_FRIENDLY "PrayerTimes"</span>
<span class="add">+#define PROG_VERSION "0.3"</span>
<span class="add">+</span>
<span class="add">+static const char* TimeName[] =</span>
<span class="add">+{</span>
<span class="add">+	"Fajr",</span>
<span class="add">+	"Sunrise",</span>
<span class="add">+	"Dhuhr",</span>
<span class="add">+	"Asr",</span>
<span class="add">+	"Sunset",</span>
<span class="add">+	"Maghrib",</span>
<span class="add">+	"Isha",</span>
<span class="add">+};</span>
<span class="add">+</span>
<span class="add">+void print_help(FILE* f)</span>
<span class="add">+{</span>
<span class="add">+	fputs(PROG_NAME_FRIENDLY " " PROG_VERSION "\n\n", stderr);</span>
<span class="add">+	fputs("Usage: " PROG_NAME " options...\n"</span>
<span class="add">+	      "\n"</span>
<span class="add">+		  " Options\n"</span>
<span class="add">+	      "    --help                      -h  you're reading it\n"</span>
<span class="add">+	      "    --version                   -v  prints name and version, then exits\n"</span>
<span class="add">+	      "    --date arg                  -d  get prayer times for arbitrary date\n"</span>
<span class="add">+	      "    --timezone arg              -z  get prayer times for arbitrary timezone\n"</span>
<span class="add">+	      "  * --latitude arg              -l  latitude of desired location\n"</span>
<span class="add">+	      "  * --longitude arg             -n  longitude of desired location\n"</span>
<span class="add">+	      "    --calc-method arg           -c  select prayer time calculation method\n"</span>
<span class="add">+	      "    --asr-juristic-method arg   -a  select Juristic method for calculating Asr prayer time\n"</span>
<span class="add">+	      "    --high-lats-method arg      -i  select adjusting method for higher latitude\n"</span>
<span class="add">+	      "    --dhuhr-minutes arg             minutes after mid-way for calculating Dhuhr prayer time\n"</span>
<span class="add">+	      " ** --maghrib-minutes arg           minutes after sunset for calculating Maghrib prayer time\n"</span>
<span class="add">+	      " ** --isha-minutes arg              minutes after Maghrib for calculating Isha prayer time\n"</span>
<span class="add">+	      " ** --fajr-angle arg                angle for calculating Fajr prayer time\n"</span>
<span class="add">+	      " ** --maghrib-angle arg             angle for calculating Maghrib prayer time\n"</span>
<span class="add">+	      " ** --isha-angle arg                angle for calculating Isha prayer time\n"</span>
<span class="add">+		  "\n"</span>
<span class="add">+		  "  * These options are required\n"</span>
<span class="add">+		  " ** By providing any of these options the calculation method is set to custom\n"</span>
<span class="add">+	      "\n"</span>
<span class="add">+		  " Possible arguments for --calc-method\n"</span>
<span class="add">+	      "    jafari        Ithna Ashari\n"</span>
<span class="add">+	      "    karachi       University of Islamic Sciences, Karachi\n"</span>
<span class="add">+	      "    isna          Islamic Society of North America (ISNA)\n"</span>
<span class="add">+	      "    mwl           Muslim World League (MWL)\n"</span>
<span class="add">+	      "    makkah        Umm al-Qura, Makkah\n"</span>
<span class="add">+	      "    egypt         Egyptian General Authority of Survey\n"</span>
<span class="add">+	      "    custom        Custom Setting\n"</span>
<span class="add">+          "\n"</span>
<span class="add">+		  " Possible arguments for --asr-juristic-method\n"</span>
<span class="add">+	      "    shafii        Shafii (standard)\n"</span>
<span class="add">+	      "    hanafi        Hanafi\n"</span>
<span class="add">+          "\n"</span>
<span class="add">+		  " Possible arguments for --high-lats-method\n"</span>
<span class="add">+	      "    none          No adjustment\n"</span>
<span class="add">+	      "    midnight      middle of night\n"</span>
<span class="add">+	      "    oneseventh    1/7th of night\n"</span>
<span class="add">+	      "    anglebased    angle/60th of night\n"</span>
<span class="add">+		  , stderr);</span>
<span class="add">+</span>
<span class="add">+}</span>
<span class="add">+</span>
<span class="add">+int main(int argc, char* argv[])</span>
<span class="add">+{</span>
<span class="add">+	PrayerTimes prayer_times;</span>
<span class="add">+	double latitude = NAN;		// 35.7061</span>
<span class="add">+	double longitude = NAN;		// 51.4358</span>
<span class="add">+	time_t date = time(NULL);</span>
<span class="add">+	double timezone = NAN;</span>
<span class="add">+</span>
<span class="add">+	// Parse options</span>
<span class="add">+	for (;;)</span>
<span class="add">+	{</span>
<span class="add">+		static option long_options[] =</span>
<span class="add">+		{</span>
<span class="add">+			{ "help",                no_argument,       NULL, 'h' },</span>
<span class="add">+			{ "version",             no_argument,       NULL, 'v' },</span>
<span class="add">+			{ "date",                required_argument, NULL, 'd' },</span>
<span class="add">+			{ "timezone",            required_argument, NULL, 'z' },</span>
<span class="add">+			{ "latitude",            required_argument, NULL, 'l' },</span>
<span class="add">+			{ "longitude",           required_argument, NULL, 'n' },</span>
<span class="add">+			{ "calc-method",         required_argument, NULL, 'c' },</span>
<span class="add">+			{ "asr-juristic-method", required_argument, NULL, 'a' },</span>
<span class="add">+			{ "high-lats-method",    required_argument, NULL, 'i' },</span>
<span class="add">+			{ "dhuhr-minutes",       required_argument, NULL, 0   },</span>
<span class="add">+			{ "maghrib-minutes",     required_argument, NULL, 0   },</span>
<span class="add">+			{ "isha-minutes",        required_argument, NULL, 0   },</span>
<span class="add">+			{ "fajr-angle",          required_argument, NULL, 0   },</span>
<span class="add">+			{ "maghrib-angle",       required_argument, NULL, 0   },</span>
<span class="add">+			{ "isha-angle",          required_argument, NULL, 0   },</span>
<span class="add">+			{ 0, 0, 0, 0 }</span>
<span class="add">+		};</span>
<span class="add">+</span>
<span class="add">+		enum	// long options missing a short form</span>
<span class="add">+		{</span>
<span class="add">+			DHUHR_MINUTES = 9,</span>
<span class="add">+			MAGHRIB_MINUTES,</span>
<span class="add">+			ISHA_MINUTES,</span>
<span class="add">+			FAJR_ANGLE,</span>
<span class="add">+			MAGHRIB_ANGLE,</span>
<span class="add">+			ISHA_ANGLE,</span>
<span class="add">+		};</span>
<span class="add">+</span>
<span class="add">+		int option_index = 0;</span>
<span class="add">+		int c = getopt_long(argc, argv, "hvd:z:l:n:c:a:i:", long_options, &amp;option_index);</span>
<span class="add">+</span>
<span class="add">+		if (c == -1)</span>
<span class="add">+			break;		// Last option</span>
<span class="add">+</span>
<span class="add">+		if (!optarg &amp;&amp; c != 'h' &amp;&amp; c != 'v')</span>
<span class="add">+		{</span>
<span class="add">+			fprintf(stderr, "Error: %s option requires an argument\n", long_options[option_index].name);</span>
<span class="add">+			return 2;</span>
<span class="add">+		}</span>
<span class="add">+</span>
<span class="add">+		switch (c)</span>
<span class="add">+		{</span>
<span class="add">+			case 0:</span>
<span class="add">+				double arg;</span>
<span class="add">+				if (sscanf(optarg, "%lf", &amp;arg) != 1)</span>
<span class="add">+				{</span>
<span class="add">+					fprintf(stderr, "Error: Invalid number '%s'\n", optarg);</span>
<span class="add">+					return 2;</span>
<span class="add">+				}</span>
<span class="add">+				switch (option_index)</span>
<span class="add">+				{</span>
<span class="add">+					case DHUHR_MINUTES:</span>
<span class="add">+						prayer_times.set_dhuhr_minutes(arg);</span>
<span class="add">+						break;</span>
<span class="add">+					case MAGHRIB_MINUTES:</span>
<span class="add">+						prayer_times.set_maghrib_minutes(arg);</span>
<span class="add">+						break;</span>
<span class="add">+					case ISHA_MINUTES:</span>
<span class="add">+						prayer_times.set_isha_minutes(arg);</span>
<span class="add">+						break;</span>
<span class="add">+					case FAJR_ANGLE:</span>
<span class="add">+						prayer_times.set_fajr_angle(arg);</span>
<span class="add">+						break;</span>
<span class="add">+					case MAGHRIB_ANGLE:</span>
<span class="add">+						prayer_times.set_maghrib_angle(arg);</span>
<span class="add">+						break;</span>
<span class="add">+					case ISHA_ANGLE:</span>
<span class="add">+						prayer_times.set_isha_angle(arg);</span>
<span class="add">+						break;</span>
<span class="add">+					default:</span>
<span class="add">+						fprintf(stderr, "Error: Invalid command line option\n");</span>
<span class="add">+						return 2;</span>
<span class="add">+				}</span>
<span class="add">+				break;</span>
<span class="add">+			case 'h':		// --help</span>
<span class="add">+				print_help(stdout);</span>
<span class="add">+				return 0;</span>
<span class="add">+			case 'v':		// --version</span>
<span class="add">+				puts(PROG_NAME_FRIENDLY " " PROG_VERSION);</span>
<span class="add">+				return 0;</span>
<span class="add">+			case 'd':		// --date</span>
<span class="add">+			{</span>
<span class="add">+				tm* new_date = getdate(optarg);</span>
<span class="add">+				if (!new_date)</span>
<span class="add">+				{</span>
<span class="add">+					fprintf(stderr, "Error: Failed to parse '%s' as date (%m)\n", optarg);</span>
<span class="add">+					return 2;</span>
<span class="add">+				}</span>
<span class="add">+				date = mktime(new_date);</span>
<span class="add">+				break;</span>
<span class="add">+			}</span>
<span class="add">+			case 'z':		// --timezone</span>
<span class="add">+				if (sscanf(optarg, "%lf", &amp;timezone) != 1)</span>
<span class="add">+				{</span>
<span class="add">+					fprintf(stderr, "Error: Invalid timezone '%s'\n", optarg);</span>
<span class="add">+					return 2;</span>
<span class="add">+				}</span>
<span class="add">+				break;</span>
<span class="add">+			case 'l':		// --latitude</span>
<span class="add">+				if (sscanf(optarg, "%lf", &amp;latitude) != 1)</span>
<span class="add">+				{</span>
<span class="add">+					fprintf(stderr, "Error: Invalid latitude '%s'\n", optarg);</span>
<span class="add">+					return 2;</span>
<span class="add">+				}</span>
<span class="add">+				break;</span>
<span class="add">+			case 'n':		// --longitude</span>
<span class="add">+				if (sscanf(optarg, "%lf", &amp;longitude) != 1)</span>
<span class="add">+				{</span>
<span class="add">+					fprintf(stderr, "Error: Invalid longitude '%s'\n", optarg);</span>
<span class="add">+					return 2;</span>
<span class="add">+				}</span>
<span class="add">+				break;</span>
<span class="add">+			case 'c':		// --calc-method</span>
<span class="add">+				if (strcmp(optarg, "jafari") == 0)</span>
<span class="add">+					prayer_times.set_calc_method(PrayerTimes::Jafari);</span>
<span class="add">+				else if (strcmp(optarg, "karachi") == 0)</span>
<span class="add">+					prayer_times.set_calc_method(PrayerTimes::Karachi);</span>
<span class="add">+				else if (strcmp(optarg, "isna") == 0)</span>
<span class="add">+					prayer_times.set_calc_method(PrayerTimes::ISNA);</span>
<span class="add">+				else if (strcmp(optarg, "mwl") == 0)</span>
<span class="add">+					prayer_times.set_calc_method(PrayerTimes::MWL);</span>
<span class="add">+				else if (strcmp(optarg, "makkah") == 0)</span>
<span class="add">+					prayer_times.set_calc_method(PrayerTimes::Makkah);</span>
<span class="add">+				else if (strcmp(optarg, "egypt") == 0)</span>
<span class="add">+					prayer_times.set_calc_method(PrayerTimes::Egypt);</span>
<span class="add">+				else if (strcmp(optarg, "custom") == 0)</span>
<span class="add">+					prayer_times.set_calc_method(PrayerTimes::Custom);</span>
<span class="add">+				else</span>
<span class="add">+				{</span>
<span class="add">+					fprintf(stderr, "Error: Unknown method '%s'\n", optarg);</span>
<span class="add">+					return 2;</span>
<span class="add">+				}</span>
<span class="add">+				break;</span>
<span class="add">+			case 'a':		// --asr-juristic-method</span>
<span class="add">+				if (strcmp(optarg, "shafii") == 0)</span>
<span class="add">+					prayer_times.set_asr_method(PrayerTimes::Shafii);</span>
<span class="add">+				else if (strcmp(optarg, "hanafi") == 0)</span>
<span class="add">+					prayer_times.set_asr_method(PrayerTimes::Hanafi);</span>
<span class="add">+				else</span>
<span class="add">+				{</span>
<span class="add">+					fprintf(stderr, "Error: Unknown method '%s'\n", optarg);</span>
<span class="add">+					return 2;</span>
<span class="add">+				}</span>
<span class="add">+				break;</span>
<span class="add">+			case 'i':		// --high-lats-method</span>
<span class="add">+				if (strcmp(optarg, "none") == 0)</span>
<span class="add">+					prayer_times.set_high_lats_adjust_method(PrayerTimes::None);</span>
<span class="add">+				else if (strcmp(optarg, "midnight") == 0)</span>
<span class="add">+					prayer_times.set_high_lats_adjust_method(PrayerTimes::MidNight);</span>
<span class="add">+				else if (strcmp(optarg, "oneseventh") == 0)</span>
<span class="add">+					prayer_times.set_high_lats_adjust_method(PrayerTimes::OneSeventh);</span>
<span class="add">+				else if (strcmp(optarg, "anglebased") == 0)</span>
<span class="add">+					prayer_times.set_high_lats_adjust_method(PrayerTimes::AngleBased);</span>
<span class="add">+				else</span>
<span class="add">+				{</span>
<span class="add">+					fprintf(stderr, "Error: Unknown method '%s'\n", optarg);</span>
<span class="add">+					return 2;</span>
<span class="add">+				}</span>
<span class="add">+				break;</span>
<span class="add">+			default:</span>
<span class="add">+				fprintf(stderr, "Error: Unknown option '%c'\n", c);</span>
<span class="add">+				print_help(stderr);</span>
<span class="add">+				return 2;</span>
<span class="add">+		}</span>
<span class="add">+	}</span>
<span class="add">+</span>
<span class="add">+	if (isnan(latitude) || isnan(longitude))</span>
<span class="add">+	{</span>
<span class="add">+		fprintf(stderr, "Error: You must provide both latitude and longitude\n");</span>
<span class="add">+		return 2;</span>
<span class="add">+	}</span>
<span class="add">+</span>
<span class="add">+	fputs(PROG_NAME_FRIENDLY " " PROG_VERSION "\n\n", stderr);</span>
<span class="add">+</span>
<span class="add">+	if (isnan(timezone))</span>
<span class="add">+		timezone = PrayerTimes::get_effective_timezone(date);</span>
<span class="add">+</span>
<span class="add">+	double times[PrayerTimes::TimesCount];</span>
<span class="add">+	fprintf(stderr, "date          : %s", ctime(&amp;date));</span>
<span class="add">+	fprintf(stderr, "timezone      : %.1lf\n", timezone);</span>
<span class="add">+	fprintf(stderr, "latitude      : %.5lf\n", latitude);</span>
<span class="add">+	fprintf(stderr, "longitude     : %.5lf\n", longitude);</span>
<span class="add">+	puts("");</span>
<span class="add">+	prayer_times.get_prayer_times(date, latitude, longitude, timezone, times);</span>
<span class="add">+	for (int i = 0; i &lt; PrayerTimes::TimesCount; ++i)</span>
<span class="add">+		printf("%8s : %s\n", TimeName[i], PrayerTimes::float_time_to_time24(times[i]).c_str());</span>
<span class="add">+	return 0;</span>
<span class="add">+}</span>
<span class="diffline"><a name="v1%2Fcpp%2Fprayertimes.hpp">diff --git a/v1/cpp/prayertimes.hpp b/v1/cpp/prayertimes.hpp</a></span>
<span class="etc">new file mode 100644</span>
<span class="etc">index 0000000..ac0fcdf</span>
<span class="del">--- /dev/null</span>
<span class="add">+++ b/v1/cpp/prayertimes.hpp</span>
<span class="pos">@@ -0,0 +1,631 @@</span>
<span class="add">+/*-------------------------- In the name of God ----------------------------*\</span>
<span class="add">+</span>
<span class="add">+    libprayertimes 1.0</span>
<span class="add">+    Islamic prayer times calculator library</span>
<span class="add">+    Based on PrayTimes 1.1 JavaScript library</span>
<span class="add">+</span>
<span class="add">+----------------------------- Copyright Block --------------------------------</span>
<span class="add">+</span>
<span class="add">+Copyright (C) 2007-2010 PrayTimes.org</span>
<span class="add">+</span>
<span class="add">+Developed By: Mohammad Ebrahim Mohammadi Panah &lt;ebrahim at mohammadi dot ir&gt;</span>
<span class="add">+Based on a JavaScript Code By: Hamid Zarrabi-Zadeh</span>
<span class="add">+</span>
<span class="add">+License: GNU General Public License, ver 3</span>
<span class="add">+</span>
<span class="add">+TERMS OF USE:</span>
<span class="add">+    Permission is granted to use this code, with or</span>
<span class="add">+    without modification, in any website or application</span>
<span class="add">+    provided that credit is given to the original work</span>
<span class="add">+    with a link back to PrayTimes.org.</span>
<span class="add">+</span>
<span class="add">+This program is distributed in the hope that it will</span>
<span class="add">+be useful, but WITHOUT ANY WARRANTY.</span>
<span class="add">+</span>
<span class="add">+PLEASE DO NOT REMOVE THIS COPYRIGHT BLOCK.</span>
<span class="add">+</span>
<span class="add">+------------------------------------------------------------------------------</span>
<span class="add">+</span>
<span class="add">+User's Manual:</span>
<span class="add">+http://praytimes.org/manual</span>
<span class="add">+</span>
<span class="add">+Calculating Formulas:</span>
<span class="add">+http://praytimes.org/calculation</span>
<span class="add">+</span>
<span class="add">+Code Repository:</span>
<span class="add">+http://code.ebrahim.ir/prayertimes/</span>
<span class="add">+</span>
<span class="add">+\*--------------------------------------------------------------------------*/</span>
<span class="add">+</span>
<span class="add">+#include &lt;cstdio&gt;</span>
<span class="add">+#include &lt;cmath&gt;</span>
<span class="add">+#include &lt;string&gt;</span>
<span class="add">+</span>
<span class="add">+/* -------------------- PrayerTimes Class --------------------- */</span>
<span class="add">+</span>
<span class="add">+class PrayerTimes</span>
<span class="add">+{</span>
<span class="add">+public:</span>
<span class="add">+	enum</span>
<span class="add">+	{</span>
<span class="add">+		VERSION_MAJOR = 1,</span>
<span class="add">+		VERSION_MINOR = 0,</span>
<span class="add">+	};</span>
<span class="add">+/* --------------------- User Interface ----------------------- */</span>
<span class="add">+/*</span>
<span class="add">+	PrayerTimes(CalculationMethod calc_method = Jafari,</span>
<span class="add">+			JuristicMethod asr_juristic = Shafii,</span>
<span class="add">+			AdjustingMethod adjust_high_lats = MidNight,</span>
<span class="add">+			double dhuhr_minutes = 0)</span>
<span class="add">+</span>
<span class="add">+	get_prayer_times(date, latitude, longitude, timezone, &amp;times)</span>
<span class="add">+	get_prayer_times(year, month, day, latitude, longitude, timezone, &amp;times)</span>
<span class="add">+</span>
<span class="add">+	set_calc_method(method_id)</span>
<span class="add">+	set_asr_method(method_id)</span>
<span class="add">+	set_high_lats_adjust_method(method_id)		// adjust method for higher latitudes</span>
<span class="add">+</span>
<span class="add">+	set_fajr_angle(angle)</span>
<span class="add">+	set_maghrib_angle(angle)</span>
<span class="add">+	set_isha_angle(angle)</span>
<span class="add">+	set_dhuhr_minutes(minutes)		// minutes after mid-day</span>
<span class="add">+	set_maghrib_minutes(minutes)		// minutes after sunset</span>
<span class="add">+	set_isha_minutes(minutes)		// minutes after maghrib</span>
<span class="add">+</span>
<span class="add">+	get_float_time_parts(time, &amp;hours, &amp;minutes)</span>
<span class="add">+	float_time_to_time24(time)</span>
<span class="add">+	float_time_to_time12(time)</span>
<span class="add">+	float_time_to_time12ns(time)</span>
<span class="add">+*/</span>
<span class="add">+</span>
<span class="add">+	// Calculation Methods</span>
<span class="add">+	enum CalculationMethod</span>
<span class="add">+	{</span>
<span class="add">+		Jafari, 	// Ithna Ashari</span>
<span class="add">+		Karachi,	// University of Islamic Sciences, Karachi</span>
<span class="add">+		ISNA,   	// Islamic Society of North America (ISNA)</span>
<span class="add">+		MWL,    	// Muslim World League (MWL)</span>
<span class="add">+		Makkah, 	// Umm al-Qura, Makkah</span>
<span class="add">+		Egypt,  	// Egyptian General Authority of Survey</span>
<span class="add">+		Custom, 	// Custom Setting</span>
<span class="add">+</span>
<span class="add">+		CalculationMethodsCount</span>
<span class="add">+	};</span>
<span class="add">+</span>
<span class="add">+	// Juristic Methods</span>
<span class="add">+	enum JuristicMethod</span>
<span class="add">+	{</span>
<span class="add">+		Shafii,    // Shafii (standard)</span>
<span class="add">+		Hanafi,    // Hanafi</span>
<span class="add">+	};</span>
<span class="add">+</span>
<span class="add">+	// Adjusting Methods for Higher Latitudes</span>
<span class="add">+	enum AdjustingMethod</span>
<span class="add">+	{</span>
<span class="add">+		None,      	// No adjustment</span>
<span class="add">+		MidNight,  	// middle of night</span>
<span class="add">+		OneSeventh,	// 1/7th of night</span>
<span class="add">+		AngleBased,	// angle/60th of night</span>
<span class="add">+	};</span>
<span class="add">+</span>
<span class="add">+	// Time IDs</span>
<span class="add">+	enum TimeID</span>
<span class="add">+	{</span>
<span class="add">+		Fajr,</span>
<span class="add">+		Sunrise,</span>
<span class="add">+		Dhuhr,</span>
<span class="add">+		Asr,</span>
<span class="add">+		Sunset,</span>
<span class="add">+		Maghrib,</span>
<span class="add">+		Isha,</span>
<span class="add">+</span>
<span class="add">+		TimesCount</span>
<span class="add">+	};</span>
<span class="add">+</span>
<span class="add">+/* -------------------- Interface Functions -------------------- */</span>
<span class="add">+</span>
<span class="add">+	PrayerTimes(CalculationMethod calc_method = Jafari,</span>
<span class="add">+			JuristicMethod asr_juristic = Shafii,</span>
<span class="add">+			AdjustingMethod adjust_high_lats = MidNight,</span>
<span class="add">+			double dhuhr_minutes = 0)</span>
<span class="add">+	: calc_method(calc_method)</span>
<span class="add">+	, asr_juristic(asr_juristic)</span>
<span class="add">+	, adjust_high_lats(adjust_high_lats)</span>
<span class="add">+	, dhuhr_minutes(dhuhr_minutes)</span>
<span class="add">+	{</span>
<span class="add">+		method_params[Jafari]  = MethodConfig(16.0, false, 4.0, false, 14.0);	// Jafari</span>
<span class="add">+		method_params[Karachi] = MethodConfig(18.0, true,  0.0, false, 18.0);	// Karachi</span>
<span class="add">+		method_params[ISNA]    = MethodConfig(15.0, true,  0.0, false, 15.0);	// ISNA</span>
<span class="add">+		method_params[MWL]     = MethodConfig(18.0, true,  0.0, false, 17.0);	// MWL</span>
<span class="add">+		method_params[Makkah]  = MethodConfig(19.0, true,  0.0, true,  90.0);	// Makkah</span>
<span class="add">+		method_params[Egypt]   = MethodConfig(19.5, true,  0.0, false, 17.5);	// Egypt</span>
<span class="add">+		method_params[Custom]  = MethodConfig(18.0, true,  0.0, false, 17.0);	// Custom</span>
<span class="add">+	}</span>
<span class="add">+</span>
<span class="add">+	/* return prayer times for a given date */</span>
<span class="add">+	void get_prayer_times(int year, int month, int day, double _latitude, double _longitude, double _timezone, double times[])</span>
<span class="add">+	{</span>
<span class="add">+		latitude = _latitude;</span>
<span class="add">+		longitude = _longitude;</span>
<span class="add">+		timezone = _timezone;</span>
<span class="add">+		julian_date = get_julian_date(year, month, day) - longitude / (double) (15 * 24);</span>
<span class="add">+		compute_day_times(times);</span>
<span class="add">+	}</span>
<span class="add">+</span>
<span class="add">+	/* return prayer times for a given date */</span>
<span class="add">+	void get_prayer_times(time_t date, double latitude, double longitude, double timezone, double times[])</span>
<span class="add">+	{</span>
<span class="add">+		tm* t = localtime(&amp;date);</span>
<span class="add">+		get_prayer_times(1900 + t-&gt;tm_year, t-&gt;tm_mon + 1, t-&gt;tm_mday, latitude, longitude, timezone, times);</span>
<span class="add">+	}</span>
<span class="add">+</span>
<span class="add">+	/* set the calculation method  */</span>
<span class="add">+	void set_calc_method(CalculationMethod method_id)</span>
<span class="add">+	{</span>
<span class="add">+		calc_method = method_id;</span>
<span class="add">+	}</span>
<span class="add">+</span>
<span class="add">+	/* set the juristic method for Asr */</span>
<span class="add">+	void set_asr_method(JuristicMethod method_id)</span>
<span class="add">+	{</span>
<span class="add">+		asr_juristic = method_id;</span>
<span class="add">+	}</span>
<span class="add">+</span>
<span class="add">+	/* set adjusting method for higher latitudes */</span>
<span class="add">+	void set_high_lats_adjust_method(AdjustingMethod method_id)</span>
<span class="add">+	{</span>
<span class="add">+		adjust_high_lats = method_id;</span>
<span class="add">+	}</span>
<span class="add">+</span>
<span class="add">+	/* set the angle for calculating Fajr */</span>
<span class="add">+	void set_fajr_angle(double angle)</span>
<span class="add">+	{</span>
<span class="add">+		method_params[Custom].fajr_angle = angle;</span>
<span class="add">+		calc_method = Custom;</span>
<span class="add">+	}</span>
<span class="add">+</span>
<span class="add">+	/* set the angle for calculating Maghrib */</span>
<span class="add">+	void set_maghrib_angle(double angle)</span>
<span class="add">+	{</span>
<span class="add">+		method_params[Custom].maghrib_is_minutes = false;</span>
<span class="add">+		method_params[Custom].maghrib_value = angle;</span>
<span class="add">+		calc_method = Custom;</span>
<span class="add">+	}</span>
<span class="add">+</span>
<span class="add">+	/* set the angle for calculating Isha */</span>
<span class="add">+	void set_isha_angle(double angle)</span>
<span class="add">+	{</span>
<span class="add">+		method_params[Custom].isha_is_minutes = false;</span>
<span class="add">+		method_params[Custom].isha_value = angle;</span>
<span class="add">+		calc_method = Custom;</span>
<span class="add">+	}</span>
<span class="add">+</span>
<span class="add">+	/* set the minutes after mid-day for calculating Dhuhr */</span>
<span class="add">+	void set_dhuhr_minutes(double minutes)</span>
<span class="add">+	{</span>
<span class="add">+		dhuhr_minutes = minutes;</span>
<span class="add">+	}</span>
<span class="add">+</span>
<span class="add">+	/* set the minutes after Sunset for calculating Maghrib */</span>
<span class="add">+	void set_maghrib_minutes(double minutes)</span>
<span class="add">+	{</span>
<span class="add">+		method_params[Custom].maghrib_is_minutes = true;</span>
<span class="add">+		method_params[Custom].maghrib_value = minutes;</span>
<span class="add">+		calc_method = Custom;</span>
<span class="add">+	}</span>
<span class="add">+</span>
<span class="add">+	/* set the minutes after Maghrib for calculating Isha */</span>
<span class="add">+	void set_isha_minutes(double minutes)</span>
<span class="add">+	{</span>
<span class="add">+		method_params[Custom].isha_is_minutes = true;</span>
<span class="add">+		method_params[Custom].isha_value = minutes;</span>
<span class="add">+		calc_method = Custom;</span>
<span class="add">+	}</span>
<span class="add">+</span>
<span class="add">+	/* get hours and minutes parts of a float time */</span>
<span class="add">+	static void get_float_time_parts(double time, int&amp; hours, int&amp; minutes)</span>
<span class="add">+	{</span>
<span class="add">+		time = fix_hour(time + 0.5 / 60);		// add 0.5 minutes to round</span>
<span class="add">+		hours = floor(time);</span>
<span class="add">+		minutes = floor((time - hours) * 60);</span>
<span class="add">+	}</span>
<span class="add">+</span>
<span class="add">+	/* convert float hours to 24h format */</span>
<span class="add">+	static std::string float_time_to_time24(double time)</span>
<span class="add">+	{</span>
<span class="add">+		if (isnan(time))</span>
<span class="add">+			return std::string();</span>
<span class="add">+		int hours, minutes;</span>
<span class="add">+		get_float_time_parts(time, hours, minutes);</span>
<span class="add">+		return two_digits_format(hours) + ':' + two_digits_format(minutes);</span>
<span class="add">+	}</span>
<span class="add">+</span>
<span class="add">+	/* convert float hours to 12h format */</span>
<span class="add">+	static std::string float_time_to_time12(double time, bool no_suffix = false)</span>
<span class="add">+	{</span>
<span class="add">+		if (isnan(time))</span>
<span class="add">+			return std::string();</span>
<span class="add">+		int hours, minutes;</span>
<span class="add">+		get_float_time_parts(time, hours, minutes);</span>
<span class="add">+		const char* suffix = hours &gt;= 12 ? " PM" : " AM";</span>
<span class="add">+		hours = (hours + 12 - 1) % 12 + 1;</span>
<span class="add">+		return int_to_string(hours) + ':' + two_digits_format(minutes) + (no_suffix ? "" : suffix);</span>
<span class="add">+	}</span>
<span class="add">+</span>
<span class="add">+	/* convert float hours to 12h format with no suffix */</span>
<span class="add">+	static std::string float_time_to_time12ns(double time)</span>
<span class="add">+	{</span>
<span class="add">+		return float_time_to_time12(time, true);</span>
<span class="add">+	}</span>
<span class="add">+</span>
<span class="add">+/* ---------------------- Time-Zone Functions ----------------------- */</span>
<span class="add">+</span>
<span class="add">+	/* compute local time-zone for a specific date */</span>
<span class="add">+	static double get_effective_timezone(time_t local_time)</span>
<span class="add">+	{</span>
<span class="add">+		tm* tmp = localtime(&amp;local_time);</span>
<span class="add">+		tmp-&gt;tm_isdst = 0;</span>
<span class="add">+		time_t local = mktime(tmp);</span>
<span class="add">+		tmp = gmtime(&amp;local_time);</span>
<span class="add">+		tmp-&gt;tm_isdst = 0;</span>
<span class="add">+		time_t gmt = mktime(tmp);</span>
<span class="add">+		return (local - gmt) / 3600.0;</span>
<span class="add">+	}</span>
<span class="add">+</span>
<span class="add">+	/* compute local time-zone for a specific date */</span>
<span class="add">+	static double get_effective_timezone(int year, int month, int day)</span>
<span class="add">+	{</span>
<span class="add">+		tm date = { 0 };</span>
<span class="add">+		date.tm_year = year - 1900;</span>
<span class="add">+		date.tm_mon = month - 1;</span>
<span class="add">+		date.tm_mday = day;</span>
<span class="add">+		date.tm_isdst = -1;		// determine it yourself from system</span>
<span class="add">+		time_t local = mktime(&amp;date);		// seconds since midnight Jan 1, 1970</span>
<span class="add">+		return get_effective_timezone(local);</span>
<span class="add">+	}</span>
<span class="add">+</span>
<span class="add">+private:</span>
<span class="add">+/* ------------------- Calc Method Parameters -------------------- */</span>
<span class="add">+</span>
<span class="add">+	struct MethodConfig</span>
<span class="add">+	{</span>
<span class="add">+		MethodConfig()</span>
<span class="add">+		{</span>
<span class="add">+		}</span>
<span class="add">+</span>
<span class="add">+		MethodConfig(double fajr_angle,</span>
<span class="add">+				bool maghrib_is_minutes,</span>
<span class="add">+				double maghrib_value,</span>
<span class="add">+				bool isha_is_minutes,</span>
<span class="add">+				double isha_value)</span>
<span class="add">+		: fajr_angle(fajr_angle)</span>
<span class="add">+		, maghrib_is_minutes(maghrib_is_minutes)</span>
<span class="add">+		, maghrib_value(maghrib_value)</span>
<span class="add">+		, isha_is_minutes(isha_is_minutes)</span>
<span class="add">+		, isha_value(isha_value)</span>
<span class="add">+		{</span>
<span class="add">+		}</span>
<span class="add">+</span>
<span class="add">+		double fajr_angle;</span>
<span class="add">+		bool   maghrib_is_minutes;</span>
<span class="add">+		double maghrib_value;		// angle or minutes</span>
<span class="add">+		bool   isha_is_minutes;</span>
<span class="add">+		double isha_value;		// angle or minutes</span>
<span class="add">+	};</span>
<span class="add">+</span>
<span class="add">+/* ---------------------- Calculation Functions ----------------------- */</span>
<span class="add">+</span>
<span class="add">+	/* References: */</span>
<span class="add">+	/* http://www.ummah.net/astronomy/saltime   */</span>
<span class="add">+	/* http://aa.usno.navy.mil/faq/docs/SunApprox.html */</span>
<span class="add">+</span>
<span class="add">+	typedef std::pair&lt;double, double&gt; DoublePair;</span>
<span class="add">+</span>
<span class="add">+	/* compute declination angle of sun and equation of time */</span>
<span class="add">+	DoublePair sun_position(double jd)</span>
<span class="add">+	{</span>
<span class="add">+		double d = jd - 2451545.0;</span>
<span class="add">+		double g = fix_angle(357.529 + 0.98560028 * d);</span>
<span class="add">+		double q = fix_angle(280.459 + 0.98564736 * d);</span>
<span class="add">+		double l = fix_angle(q + 1.915 * dsin(g) + 0.020 * dsin(2 * g));</span>
<span class="add">+</span>
<span class="add">+		// double r = 1.00014 - 0.01671 * dcos(g) - 0.00014 * dcos(2 * g);</span>
<span class="add">+		double e = 23.439 - 0.00000036 * d;</span>
<span class="add">+</span>
<span class="add">+		double dd = darcsin(dsin(e) * dsin(l));</span>
<span class="add">+		double ra = darctan2(dcos(e) * dsin(l), dcos(l)) / 15.0;</span>
<span class="add">+		ra = fix_hour(ra);</span>
<span class="add">+		double eq_t = q / 15.0 - ra;</span>
<span class="add">+</span>
<span class="add">+		return DoublePair(dd, eq_t);</span>
<span class="add">+	}</span>
<span class="add">+</span>
<span class="add">+	/* compute equation of time */</span>
<span class="add">+	double equation_of_time(double jd)</span>
<span class="add">+	{</span>
<span class="add">+		return sun_position(jd).second;</span>
<span class="add">+	}</span>
<span class="add">+</span>
<span class="add">+	/* compute declination angle of sun */</span>
<span class="add">+	double sun_declination(double jd)</span>
<span class="add">+	{</span>
<span class="add">+		return sun_position(jd).first;</span>
<span class="add">+	}</span>
<span class="add">+</span>
<span class="add">+	/* compute mid-day (Dhuhr, Zawal) time */</span>
<span class="add">+	double compute_mid_day(double _t)</span>
<span class="add">+	{</span>
<span class="add">+		double t = equation_of_time(julian_date + _t);</span>
<span class="add">+		double z = fix_hour(12 - t);</span>
<span class="add">+		return z;</span>
<span class="add">+	}</span>
<span class="add">+</span>
<span class="add">+	/* compute time for a given angle G */</span>
<span class="add">+	double compute_time(double g, double t)</span>
<span class="add">+	{</span>
<span class="add">+		double d = sun_declination(julian_date + t);</span>
<span class="add">+		double z = compute_mid_day(t);</span>
<span class="add">+		double v = 1.0 / 15.0 * darccos((-dsin(g) - dsin(d) * dsin(latitude)) / (dcos(d) * dcos(latitude)));</span>
<span class="add">+		return z + (g &gt; 90.0 ? - v :  v);</span>
<span class="add">+	}</span>
<span class="add">+</span>
<span class="add">+	/* compute the time of Asr */</span>
<span class="add">+	double compute_asr(int step, double t)  // Shafii: step=1, Hanafi: step=2</span>
<span class="add">+	{</span>
<span class="add">+		double d = sun_declination(julian_date + t);</span>
<span class="add">+		double g = -darccot(step + dtan(fabs(latitude - d)));</span>
<span class="add">+		return compute_time(g, t);</span>
<span class="add">+	}</span>
<span class="add">+</span>
<span class="add">+/* ---------------------- Compute Prayer Times ----------------------- */</span>
<span class="add">+</span>
<span class="add">+	// array parameters must be at least of size TimesCount</span>
<span class="add">+</span>
<span class="add">+	/* compute prayer times at given julian date */</span>
<span class="add">+	void compute_times(double times[])</span>
<span class="add">+	{</span>
<span class="add">+		day_portion(times);</span>
<span class="add">+</span>
<span class="add">+		times[Fajr]    = compute_time(180.0 - method_params[calc_method].fajr_angle, times[Fajr]);</span>
<span class="add">+		times[Sunrise] = compute_time(180.0 - 0.833, times[Sunrise]);</span>
<span class="add">+		times[Dhuhr]   = compute_mid_day(times[Dhuhr]);</span>
<span class="add">+		times[Asr]     = compute_asr(1 + asr_juristic, times[Asr]);</span>
<span class="add">+		times[Sunset]  = compute_time(0.833, times[Sunset]);</span>
<span class="add">+		times[Maghrib] = compute_time(method_params[calc_method].maghrib_value, times[Maghrib]);</span>
<span class="add">+		times[Isha]    = compute_time(method_params[calc_method].isha_value, times[Isha]);</span>
<span class="add">+	}</span>
<span class="add">+</span>
<span class="add">+</span>
<span class="add">+	/* compute prayer times at given julian date */</span>
<span class="add">+	void compute_day_times(double times[])</span>
<span class="add">+	{</span>
<span class="add">+		double default_times[] = { 5, 6, 12, 13, 18, 18, 18 };		// default times</span>
<span class="add">+		for (int i = 0; i &lt; TimesCount; ++i)</span>
<span class="add">+			times[i] = default_times[i];</span>
<span class="add">+</span>
<span class="add">+		for (int i = 0; i &lt; NUM_ITERATIONS; ++i)</span>
<span class="add">+			compute_times(times);</span>
<span class="add">+</span>
<span class="add">+		adjust_times(times);</span>
<span class="add">+	}</span>
<span class="add">+</span>
<span class="add">+</span>
<span class="add">+	/* adjust times in a prayer time array */</span>
<span class="add">+	void adjust_times(double times[])</span>
<span class="add">+	{</span>
<span class="add">+		for (int i = 0; i &lt; TimesCount; ++i)</span>
<span class="add">+			times[i] += timezone - longitude / 15.0;</span>
<span class="add">+		times[Dhuhr] += dhuhr_minutes / 60.0;		// Dhuhr</span>
<span class="add">+		if (method_params[calc_method].maghrib_is_minutes)		// Maghrib</span>
<span class="add">+			times[Maghrib] = times[Sunset] + method_params[calc_method].maghrib_value / 60.0;</span>
<span class="add">+		if (method_params[calc_method].isha_is_minutes)		// Isha</span>
<span class="add">+			times[Isha] = times[Maghrib] + method_params[calc_method].isha_value / 60.0;</span>
<span class="add">+</span>
<span class="add">+		if (adjust_high_lats != None)</span>
<span class="add">+			adjust_high_lat_times(times);</span>
<span class="add">+	}</span>
<span class="add">+</span>
<span class="add">+	/* adjust Fajr, Isha and Maghrib for locations in higher latitudes */</span>
<span class="add">+	void adjust_high_lat_times(double times[])</span>
<span class="add">+	{</span>
<span class="add">+		double night_time = time_diff(times[Sunset], times[Sunrise]);		// sunset to sunrise</span>
<span class="add">+</span>
<span class="add">+		// Adjust Fajr</span>
<span class="add">+		double fajr_diff = night_portion(method_params[calc_method].fajr_angle) * night_time;</span>
<span class="add">+		if (isnan(times[Fajr]) || time_diff(times[Fajr], times[Sunrise]) &gt; fajr_diff)</span>
<span class="add">+			times[Fajr] = times[Sunrise] - fajr_diff;</span>
<span class="add">+</span>
<span class="add">+		// Adjust Isha</span>
<span class="add">+		double isha_angle = method_params[calc_method].isha_is_minutes ? 18.0 : method_params[calc_method].isha_value;</span>
<span class="add">+		double isha_diff = night_portion(isha_angle) * night_time;</span>
<span class="add">+		if (isnan(times[Isha]) || time_diff(times[Sunset], times[Isha]) &gt; isha_diff)</span>
<span class="add">+			times[Isha] = times[Sunset] + isha_diff;</span>
<span class="add">+</span>
<span class="add">+		// Adjust Maghrib</span>
<span class="add">+		double maghrib_angle = method_params[calc_method].maghrib_is_minutes ? 4.0 : method_params[calc_method].maghrib_value;</span>
<span class="add">+		double maghrib_diff = night_portion(maghrib_angle) * night_time;</span>
<span class="add">+		if (isnan(times[Maghrib]) || time_diff(times[Sunset], times[Maghrib]) &gt; maghrib_diff)</span>
<span class="add">+			times[Maghrib] = times[Sunset] + maghrib_diff;</span>
<span class="add">+	}</span>
<span class="add">+</span>
<span class="add">+</span>
<span class="add">+	/* the night portion used for adjusting times in higher latitudes */</span>
<span class="add">+	double night_portion(double angle)</span>
<span class="add">+	{</span>
<span class="add">+		switch (adjust_high_lats)</span>
<span class="add">+		{</span>
<span class="add">+			case AngleBased:</span>
<span class="add">+				return angle / 60.0;</span>
<span class="add">+			case MidNight:</span>
<span class="add">+				return 1.0 / 2.0;</span>
<span class="add">+			case OneSeventh:</span>
<span class="add">+				return 1.0 / 7.0;</span>
<span class="add">+			default:</span>
<span class="add">+				// Just to return something!</span>
<span class="add">+				// In original library nothing was returned</span>
<span class="add">+				// Maybe I should throw an exception</span>
<span class="add">+				// It must be impossible to reach here</span>
<span class="add">+				return 0;</span>
<span class="add">+		}</span>
<span class="add">+	}</span>
<span class="add">+</span>
<span class="add">+	/* convert hours to day portions  */</span>
<span class="add">+	void day_portion(double times[])</span>
<span class="add">+	{</span>
<span class="add">+		for (int i = 0; i &lt; TimesCount; ++i)</span>
<span class="add">+			times[i] /= 24.0;</span>
<span class="add">+	}</span>
<span class="add">+</span>
<span class="add">+/* ---------------------- Misc Functions ----------------------- */</span>
<span class="add">+</span>
<span class="add">+	/* compute the difference between two times  */</span>
<span class="add">+	static double time_diff(double time1, double time2)</span>
<span class="add">+	{</span>
<span class="add">+		return fix_hour(time2 - time1);</span>
<span class="add">+	}</span>
<span class="add">+</span>
<span class="add">+	static std::string int_to_string(int num)</span>
<span class="add">+	{</span>
<span class="add">+		char tmp[16];</span>
<span class="add">+		tmp[0] = '\0';</span>
<span class="add">+		sprintf(tmp, "%d", num);</span>
<span class="add">+		return std::string(tmp);</span>
<span class="add">+	}</span>
<span class="add">+</span>
<span class="add">+	/* add a leading 0 if necessary */</span>
<span class="add">+	static std::string two_digits_format(int num)</span>
<span class="add">+	{</span>
<span class="add">+		char tmp[16];</span>
<span class="add">+		tmp[0] = '\0';</span>
<span class="add">+		sprintf(tmp, "%2.2d", num);</span>
<span class="add">+		return std::string(tmp);</span>
<span class="add">+	}</span>
<span class="add">+</span>
<span class="add">+/* ---------------------- Julian Date Functions ----------------------- */</span>
<span class="add">+</span>
<span class="add">+	/* calculate julian date from a calendar date */</span>
<span class="add">+	double get_julian_date(int year, int month, int day)</span>
<span class="add">+	{</span>
<span class="add">+		if (month &lt;= 2)</span>
<span class="add">+		{</span>
<span class="add">+			year -= 1;</span>
<span class="add">+			month += 12;</span>
<span class="add">+		}</span>
<span class="add">+</span>
<span class="add">+		double a = floor(year / 100.0);</span>
<span class="add">+		double b = 2 - a + floor(a / 4.0);</span>
<span class="add">+</span>
<span class="add">+		return floor(365.25 * (year + 4716)) + floor(30.6001 * (month + 1)) + day + b - 1524.5;</span>
<span class="add">+	}</span>
<span class="add">+</span>
<span class="add">+	/* convert a calendar date to julian date (second method) */</span>
<span class="add">+	double calc_julian_date(int year, int month, int day)</span>
<span class="add">+	{</span>
<span class="add">+		double j1970 = 2440588.0;</span>
<span class="add">+		tm date = { 0 };</span>
<span class="add">+		date.tm_year = year - 1900;</span>
<span class="add">+		date.tm_mon = month - 1;</span>
<span class="add">+		date.tm_mday = day;</span>
<span class="add">+		date.tm_isdst = -1;		// determine it yourself from system</span>
<span class="add">+		time_t ms = mktime(&amp;date);		// seconds since midnight Jan 1, 1970</span>
<span class="add">+		double days = floor(ms / (double) (60 * 60 * 24));</span>
<span class="add">+		return j1970 + days - 0.5;</span>
<span class="add">+	}</span>
<span class="add">+</span>
<span class="add">+/* ---------------------- Trigonometric Functions ----------------------- */</span>
<span class="add">+</span>
<span class="add">+	/* degree sin */</span>
<span class="add">+	static double dsin(double d)</span>
<span class="add">+	{</span>
<span class="add">+		return sin(deg2rad(d));</span>
<span class="add">+	}</span>
<span class="add">+</span>
<span class="add">+	/* degree cos */</span>
<span class="add">+	static double dcos(double d)</span>
<span class="add">+	{</span>
<span class="add">+		return cos(deg2rad(d));</span>
<span class="add">+	}</span>
<span class="add">+</span>
<span class="add">+	/* degree tan */</span>
<span class="add">+	static double dtan(double d)</span>
<span class="add">+	{</span>
<span class="add">+		return tan(deg2rad(d));</span>
<span class="add">+	}</span>
<span class="add">+</span>
<span class="add">+	/* degree arcsin */</span>
<span class="add">+	static double darcsin(double x)</span>
<span class="add">+	{</span>
<span class="add">+		return rad2deg(asin(x));</span>
<span class="add">+	}</span>
<span class="add">+</span>
<span class="add">+	/* degree arccos */</span>
<span class="add">+	static double darccos(double x)</span>
<span class="add">+	{</span>
<span class="add">+		return rad2deg(acos(x));</span>
<span class="add">+	}</span>
<span class="add">+</span>
<span class="add">+	/* degree arctan */</span>
<span class="add">+	static double darctan(double x)</span>
<span class="add">+	{</span>
<span class="add">+		return rad2deg(atan(x));</span>
<span class="add">+	}</span>
<span class="add">+</span>
<span class="add">+	/* degree arctan2 */</span>
<span class="add">+	static double darctan2(double y, double x)</span>
<span class="add">+	{</span>
<span class="add">+		return rad2deg(atan2(y, x));</span>
<span class="add">+	}</span>
<span class="add">+</span>
<span class="add">+	/* degree arccot */</span>
<span class="add">+	static double darccot(double x)</span>
<span class="add">+	{</span>
<span class="add">+		return rad2deg(atan(1.0 / x));</span>
<span class="add">+	}</span>
<span class="add">+</span>
<span class="add">+	/* degree to radian */</span>
<span class="add">+	static double deg2rad(double d)</span>
<span class="add">+	{</span>
<span class="add">+		return d * M_PI / 180.0;</span>
<span class="add">+	}</span>
<span class="add">+</span>
<span class="add">+	/* radian to degree */</span>
<span class="add">+	static double rad2deg(double r)</span>
<span class="add">+	{</span>
<span class="add">+		return r * 180.0 / M_PI;</span>
<span class="add">+	}</span>
<span class="add">+</span>
<span class="add">+	/* range reduce angle in degrees. */</span>
<span class="add">+	static double fix_angle(double a)</span>
<span class="add">+	{</span>
<span class="add">+		a = a - 360.0 * floor(a / 360.0);</span>
<span class="add">+		a = a &lt; 0.0 ? a + 360.0 : a;</span>
<span class="add">+		return a;</span>
<span class="add">+	}</span>
<span class="add">+</span>
<span class="add">+	/* range reduce hours to 0..23 */</span>
<span class="add">+	static double fix_hour(double a)</span>
<span class="add">+	{</span>
<span class="add">+		a = a - 24.0 * floor(a / 24.0);</span>
<span class="add">+		a = a &lt; 0.0 ? a + 24.0 : a;</span>
<span class="add">+		return a;</span>
<span class="add">+	}</span>
<span class="add">+</span>
<span class="add">+private:</span>
<span class="add">+/* ---------------------- Private Variables -------------------- */</span>
<span class="add">+</span>
<span class="add">+	MethodConfig method_params[CalculationMethodsCount];</span>
<span class="add">+</span>
<span class="add">+	CalculationMethod calc_method;		// caculation method</span>
<span class="add">+	JuristicMethod asr_juristic;		// Juristic method for Asr</span>
<span class="add">+	AdjustingMethod adjust_high_lats;	// adjusting method for higher latitudes</span>
<span class="add">+	double dhuhr_minutes;		// minutes after mid-day for Dhuhr</span>
<span class="add">+</span>
<span class="add">+	double latitude;</span>
<span class="add">+	double longitude;</span>
<span class="add">+	double timezone;</span>
<span class="add">+	double julian_date;</span>
<span class="add">+</span>
<span class="add">+/* --------------------- Technical Settings -------------------- */</span>
<span class="add">+</span>
<span class="add">+	static const int NUM_ITERATIONS = 1;		// number of iterations needed to compute times</span>
<span class="add">+};</span></pre>
</div>

<div class="ad"><a href="http://viewgit.sourceforge.net/" title="Visit the ViewGit homepage">ViewGit</a></div></div>
</body>
</html>
