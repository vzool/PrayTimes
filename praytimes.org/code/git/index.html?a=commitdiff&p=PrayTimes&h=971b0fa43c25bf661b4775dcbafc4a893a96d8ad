<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<title>PrayTimes - Commitdiff - ViewGit</title>
	<link rel="stylesheet" href="default.css" type="text/css" />
	<link rel="icon" type="image/png" href="favicon.png" />
	<link rel="alternate" type="application/rss+xml" title="PrayTimes log" href="?a=rss-log&amp;p=PrayTimes" />
	<meta name="generator" content="ViewGit" />
</head>
<body>


<div class="nav">
<a href=".">Index</a>
 &raquo; <a href="?a=summary&amp;p=PrayTimes">PrayTimes</a> : Commitdiff 971b0f</div>
<div id="page_body">

<div class="pagenav">
<a href="?a=summary&amp;p=PrayTimes">Summary</a> | <a href="?a=shortlog&amp;p=PrayTimes">Shortlog</a> | <a href="?a=commit&amp;p=PrayTimes&amp;h=971b0fa43c25bf661b4775dcbafc4a893a96d8ad">Commit</a> | <span class="cur"><a href="?a=commitdiff&amp;p=PrayTimes&amp;h=971b0fa43c25bf661b4775dcbafc4a893a96d8ad">Commitdiff</a></span> | <a href="?a=tree&amp;p=PrayTimes&amp;h=035f00cf4630058f3f304a5ae9b98a6e84716b51&amp;hb=971b0fa43c25bf661b4775dcbafc4a893a96d8ad">Tree</a> | 
<form action="?" method="get" class="search">
<input type="hidden" name="a" value="search" />
<input type="hidden" name="p" value="PrayTimes" />
<input type="hidden" name="h" value="971b0fa43c25bf661b4775dcbafc4a893a96d8ad" />
<select name="st">
	<option>commit</option>
	<option>change</option>
	<option>author</option>
	<option>committer</option>
</select>
<input type="text" name="s" />
</form>
</div>

<h1>Python v2.1 added</h1>

<div class="authorinfo">
<a href="?a=search&amp;p=PrayTimes&amp;h=HEAD&amp;st=author&amp;s=Hamid">Hamid</a> [2011-02-20 05:09:26]</div>

<div class="commitmessage">
<pre>
Python v2.1 added
js v2.1 slightly modified
</pre>
</div>

<div class="filelist">
<table>
<thead>
<tr>
	<th>Filename</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="#v2%2Fjs%2FPrayTimes.js">v2/js/PrayTimes.js</a></td><td></td></tr>
<tr>
<td><a href="#v2%2Fpython%2Fpraytimes.py">v2/python/praytimes.py</a></td><td></td></tr>
</tbody>
</table>
</div>

<div class="diff">
<pre>
<span class="diffline"><a name="v2%2Fjs%2FPrayTimes.js">diff --git a/v2/js/PrayTimes.js b/v2/js/PrayTimes.js</a></span>
<span class="etc">index dece204..2481924 100644</span>
<span class="del">--- a/v2/js/PrayTimes.js</span>
<span class="add">+++ b/v2/js/PrayTimes.js</span>
<span class="pos">@@ -2,7 +2,7 @@</span>
<span class="etc"> /*</span>
<span class="etc">
 PrayTimes.js: Prayer Times Calculator (ver 2.1)</span>
<span class="del">-Copyright (C) 2007-2010 PrayTimes.org</span>
<span class="add">+Copyright (C) 2007-2011 PrayTimes.org</span>
<span class="etc">
 Developer: Hamid Zarrabi-Zadeh</span>
<span class="etc"> License: GNU LGPL v3.0</span>
<span class="pos">@@ -50,14 +50,14 @@ http://praytimes.org/calculation</span>
<span class="etc">
</span><span class="etc">
 	var PT = new PrayTimes('ISNA');</span>
<span class="del">-	var times = PT.getTimes(new Date(), [-80, 43], -5);</span>
<span class="add">+	var times = PT.getTimes(new Date(), [43, -80], -5);</span>
<span class="etc"> 	document.write('Sunrise = '+ times.sunrise)</span>
<span class="etc">
</span><span class="etc">
 */</span>
<span class="etc">
</span><span class="etc">
<span class="del">-//----------------------- PrayTimes Object ------------------------</span></span>
<span class="add">+//----------------------- PrayTimes Class ------------------------</span>
<span class="etc">
</span><span class="etc">
 function PrayTimes(method) {</span>
<span class="pos">@@ -163,7 +163,7 @@ function PrayTimes(method) {</span>
<span class="etc">
 	timeFormat = '24h',</span>
<span class="etc"> 	timeSuffixes = ['am', 'pm'],</span>
<span class="del">-	InvalidTime =  '-----',</span>
<span class="add">+	invalidTime =  '-----',</span>
<span class="etc">
 	numIterations = 1,</span>
<span class="etc"> 	offset = {},</span>
<span class="pos">@@ -257,7 +257,7 @@ function PrayTimes(method) {</span>
<span class="etc"> 	// convert float time to the given format (see timeFormats)</span>
<span class="etc"> 	getFormattedTime: function(time, format, suffixes) {</span>
<span class="etc"> 		if (isNaN(time))</span>
<span class="del">-			return InvalidTime;</span>
<span class="add">+			return invalidTime;</span>
<span class="etc"> 		if (format == 'Float') return time;</span>
<span class="etc"> 		suffixes = suffixes || timeSuffixes;</span>
<span class="etc">
<span class="pos">@@ -318,6 +318,20 @@ function PrayTimes(method) {</span></span>
<span class="etc"> 	},</span>
<span class="etc">
</span><span class="etc">
<span class="add">+	// convert Gregorian date to Julian day</span></span>
<span class="add">+	// Ref: Astronomical Algorithms by Jean Meeus</span>
<span class="add">+	julian: function(year, month, day) {</span>
<span class="add">+		if (month &lt;= 2) {</span>
<span class="add">+			year -= 1;</span>
<span class="add">+			month += 12;</span>
<span class="add">+		};</span>
<span class="add">+		var A = Math.floor(year/ 100);</span>
<span class="add">+		var B = 2- A+ Math.floor(A/ 4);</span>
<span class="add">+</span>
<span class="add">+		var JD = Math.floor(365.25* (year+ 4716))+ Math.floor(30.6001* (month+ 1))+ day+ B- 1524.5;</span>
<span class="add">+		return JD;</span>
<span class="add">+	},</span>
<span class="add">+</span>
<span class="etc">
 	//---------------------- Compute Prayer Times -----------------------</span>
<span class="etc">
<span class="pos">@@ -489,23 +503,6 @@ function PrayTimes(method) {</span></span>
<span class="etc"> 	// add a leading 0 if necessary</span>
<span class="etc"> 	twoDigitsFormat: function(num) {</span>
<span class="etc"> 		return (num &lt;10) ? '0'+ num : num;</span>
<span class="del">-	},</span>
<span class="del">-</span>
<span class="del">-</span>
<span class="del">-	//---------------------- Julian Date Functions -----------------------</span>
<span class="del">-</span>
<span class="del">-</span>
<span class="del">-	// convert a calendar date to julian date</span>
<span class="del">-	julian: function(year, month, day) {</span>
<span class="del">-		if (month &lt;= 2) {</span>
<span class="del">-			year -= 1;</span>
<span class="del">-			month += 12;</span>
<span class="del">-		};</span>
<span class="del">-		var A = Math.floor(year/ 100);</span>
<span class="del">-		var B = 2- A+ Math.floor(A/ 4);</span>
<span class="del">-</span>
<span class="del">-		var JD = Math.floor(365.25* (year+ 4716))+ Math.floor(30.6001* (month+ 1))+ day+ B- 1524.5;</span>
<span class="del">-		return JD;</span>
<span class="etc"> 	}</span>
<span class="etc">
 }}</span>
<span class="diffline"><a name="v2%2Fpython%2Fpraytimes.py">diff --git a/v2/python/praytimes.py b/v2/python/praytimes.py</a></span>
<span class="etc">new file mode 100644</span>
<span class="etc">index 0000000..10a1170</span>
<span class="del">--- /dev/null</span>
<span class="add">+++ b/v2/python/praytimes.py</span>
<span class="pos">@@ -0,0 +1,433 @@</span>
<span class="add">+#!/usr/bin/env python</span>
<span class="add">+# compatible with python 2.x and 3.x</span>
<span class="add">+</span>
<span class="add">+import math</span>
<span class="add">+import re</span>
<span class="add">+</span>
<span class="add">+'''</span>
<span class="add">+--------------------- Copyright Block ----------------------</span>
<span class="add">+</span>
<span class="add">+praytimes.py: Prayer Times Calculator (ver 2.1)</span>
<span class="add">+Copyright (C) 2007-2011 PrayTimes.org</span>
<span class="add">+</span>
<span class="add">+Python Code: Saleem Shafi, Hamid Zarrabi-Zadeh</span>
<span class="add">+Original js Code: Hamid Zarrabi-Zadeh</span>
<span class="add">+</span>
<span class="add">+License: GNU LGPL v3.0</span>
<span class="add">+</span>
<span class="add">+TERMS OF USE:</span>
<span class="add">+	Permission is granted to use this code, with or</span>
<span class="add">+	without modification, in any website or application</span>
<span class="add">+	provided that credit is given to the original work</span>
<span class="add">+	with a link back to PrayTimes.org.</span>
<span class="add">+</span>
<span class="add">+This program is distributed in the hope that it will</span>
<span class="add">+be useful, but WITHOUT ANY WARRANTY.</span>
<span class="add">+</span>
<span class="add">+PLEASE DO NOT REMOVE THIS COPYRIGHT BLOCK.</span>
<span class="add">+</span>
<span class="add">+</span>
<span class="add">+--------------------- Help and Manual ----------------------</span>
<span class="add">+</span>
<span class="add">+User's Manual:</span>
<span class="add">+http://praytimes.org/manual</span>
<span class="add">+</span>
<span class="add">+Calculation Formulas:</span>
<span class="add">+http://praytimes.org/calculation</span>
<span class="add">+</span>
<span class="add">+</span>
<span class="add">+------------------------ User Interface -------------------------</span>
<span class="add">+</span>
<span class="add">+	getTimes (date, coordinates, timeZone [, dst [, timeFormat]])</span>
<span class="add">+</span>
<span class="add">+	setMethod (method)       // set calculation method</span>
<span class="add">+	adjust (parameters)      // adjust calculation parameters</span>
<span class="add">+	tune (offsets)           // tune times by given offsets</span>
<span class="add">+</span>
<span class="add">+	getMethod ()             // get calculation method</span>
<span class="add">+	getSetting ()            // get current calculation parameters</span>
<span class="add">+	getOffsets ()            // get current time offsets</span>
<span class="add">+</span>
<span class="add">+</span>
<span class="add">+------------------------- Sample Usage --------------------------</span>
<span class="add">+</span>
<span class="add">+	&gt;&gt;&gt; PT = PrayTimes('ISNA')</span>
<span class="add">+	&gt;&gt;&gt; times = PT.getTimes((2011, 2, 9), (43, -80), -5)</span>
<span class="add">+	&gt;&gt;&gt; times['sunrise']</span>
<span class="add">+	07:26</span>
<span class="add">+</span>
<span class="add">+'''</span>
<span class="add">+</span>
<span class="add">+#----------------------- PrayTimes Class ------------------------</span>
<span class="add">+</span>
<span class="add">+class PrayTimes():</span>
<span class="add">+</span>
<span class="add">+</span>
<span class="add">+	#------------------------ Constants --------------------------</span>
<span class="add">+</span>
<span class="add">+	# Time Names</span>
<span class="add">+	timeNames = {</span>
<span class="add">+		'imsak'    : 'Imsak',</span>
<span class="add">+		'fajr'     : 'Fajr',</span>
<span class="add">+		'sunrise'  : 'Sunrise',</span>
<span class="add">+		'dhuhr'    : 'Dhuhr',</span>
<span class="add">+		'asr'      : 'Asr',</span>
<span class="add">+		'sunset'   : 'Sunset',</span>
<span class="add">+		'maghrib'  : 'Maghrib',</span>
<span class="add">+		'isha'     : 'Isha',</span>
<span class="add">+		'midnight' : 'Midnight'</span>
<span class="add">+	}</span>
<span class="add">+</span>
<span class="add">+	# Calculation Methods</span>
<span class="add">+	methods = {</span>
<span class="add">+		'MWL': {</span>
<span class="add">+			'name': 'Muslim World League',</span>
<span class="add">+			'params': { 'fajr': 18, 'isha': 17 } },</span>
<span class="add">+		'ISNA': {</span>
<span class="add">+			'name': 'Islamic Society of North America (ISNA)',</span>
<span class="add">+			'params': { 'fajr': 15, 'isha': 15 } },</span>
<span class="add">+		'Egypt': {</span>
<span class="add">+			'name': 'Egyptian General Authority of Survey',</span>
<span class="add">+			'params': { 'fajr': 19.5, 'isha': 17.5 } },</span>
<span class="add">+		'Makkah': {</span>
<span class="add">+			'name': 'Umm Al-Qura University, Makkah',</span>
<span class="add">+			'params': { 'fajr': 18.5, 'isha': '90 min' } },  # fajr was 19 degrees before 1430 hijri</span>
<span class="add">+		'Karachi': {</span>
<span class="add">+			'name': 'University of Islamic Sciences, Karachi',</span>
<span class="add">+			'params': { 'fajr': 18, 'isha': 18 } },</span>
<span class="add">+		'Tehran': {</span>
<span class="add">+			'name': 'Institute of Geophysics, University of Tehran',</span>
<span class="add">+			'params': { 'fajr': 17.7, 'isha': 14, 'maghrib': 4.5, 'midnight': 'Jafari' } },  # isha is not explicitly specified in this method</span>
<span class="add">+		'Jafari': {</span>
<span class="add">+			'name': 'Shia Ithna-Ashari, Leva Institute, Qum',</span>
<span class="add">+			'params': { 'fajr': 16, 'isha': 14, 'maghrib': 4, 'midnight': 'Jafari' } }</span>
<span class="add">+	}</span>
<span class="add">+</span>
<span class="add">+	# Default Parameters in Calculation Methods</span>
<span class="add">+	defaultParams = {</span>
<span class="add">+		'maghrib': '0 min', 'midnight': 'Standard'</span>
<span class="add">+	}</span>
<span class="add">+</span>
<span class="add">+</span>
<span class="add">+	#---------------------- Default Settings --------------------</span>
<span class="add">+</span>
<span class="add">+	calcMethod = 'MWL'</span>
<span class="add">+</span>
<span class="add">+	# do not change anything here; use adjust method instead</span>
<span class="add">+	settings = {</span>
<span class="add">+		"imsak"    : '10 min',</span>
<span class="add">+		"dhuhr"    : '0 min',</span>
<span class="add">+		"asr"      : 'Standard',</span>
<span class="add">+		"highLats" : 'NightMiddle'</span>
<span class="add">+	}</span>
<span class="add">+</span>
<span class="add">+	timeFormat = '24h'</span>
<span class="add">+	timeSuffixes = ['am', 'pm']</span>
<span class="add">+	invalidTime =  '-----'</span>
<span class="add">+</span>
<span class="add">+	numIterations = 1</span>
<span class="add">+	offset = {}</span>
<span class="add">+</span>
<span class="add">+</span>
<span class="add">+	#---------------------- Initialization -----------------------</span>
<span class="add">+</span>
<span class="add">+	def __init__(self, method = "MWL") :</span>
<span class="add">+</span>
<span class="add">+		# set methods defaults</span>
<span class="add">+		for method, config in self.methods.items():</span>
<span class="add">+			for name, value in self.defaultParams.items():</span>
<span class="add">+				if not name in config['params'] or config['params'][name] is None:</span>
<span class="add">+					config['params'][name] = value</span>
<span class="add">+</span>
<span class="add">+		# initialize settings</span>
<span class="add">+		self.calcMethod = method if method in self.methods else 'MWL'</span>
<span class="add">+		params = self.methods[self.calcMethod]['params']</span>
<span class="add">+		for name, value in params.items():</span>
<span class="add">+			self.settings[name] = value</span>
<span class="add">+</span>
<span class="add">+		# init time offsets</span>
<span class="add">+		for name in self.timeNames:</span>
<span class="add">+			self.offset[name] = 0</span>
<span class="add">+</span>
<span class="add">+</span>
<span class="add">+	#-------------------- Interface Functions --------------------</span>
<span class="add">+</span>
<span class="add">+	def setMethod(self, method):</span>
<span class="add">+		if method in self.methods:</span>
<span class="add">+			self.adjust(self.methods[method].params)</span>
<span class="add">+			self.calcMethod = method</span>
<span class="add">+</span>
<span class="add">+	def adjust(self, params):</span>
<span class="add">+		self.settings.update(params)</span>
<span class="add">+</span>
<span class="add">+	def tune(self, timeOffsets):</span>
<span class="add">+		self.offsets.update(timeOffsets)</span>
<span class="add">+</span>
<span class="add">+	def getMethod(self):</span>
<span class="add">+		return self.calcMethod</span>
<span class="add">+</span>
<span class="add">+	def getSettings(self):</span>
<span class="add">+		return self.settings</span>
<span class="add">+</span>
<span class="add">+	def getOffsets(self):</span>
<span class="add">+		return self.offset</span>
<span class="add">+</span>
<span class="add">+	def getDefaults(self):</span>
<span class="add">+		return self.methods</span>
<span class="add">+</span>
<span class="add">+	# return prayer times for a given date</span>
<span class="add">+	def getTimes(self, date, coords, timezone, dst = 0, format = None):</span>
<span class="add">+		self.lat = coords[0]</span>
<span class="add">+		self.lng = coords[1]</span>
<span class="add">+		self.elv = coords[2] if len(coords)&gt;2 else 0</span>
<span class="add">+		if format != None:</span>
<span class="add">+			self.timeFormat = format</span>
<span class="add">+		if type(date).__name__ == 'date':</span>
<span class="add">+			date = (date.year, date.month, date.day)</span>
<span class="add">+		self.timeZone = timezone + (1 if dst else 0)</span>
<span class="add">+		self.jDate = self.julian(date[0], date[1], date[2]) - self.lng / (15 * 24.0)</span>
<span class="add">+		return self.computeTimes()</span>
<span class="add">+</span>
<span class="add">+	# convert float time to the given format (see timeFormats)</span>
<span class="add">+	def getFormattedTime(self, time, format, suffixes = None):</span>
<span class="add">+		if math.isnan(time):</span>
<span class="add">+			return self.invalidTime</span>
<span class="add">+		if format == 'Float':</span>
<span class="add">+			return time</span>
<span class="add">+		if suffixes == None:</span>
<span class="add">+			suffixes = self.timeSuffixes</span>
<span class="add">+</span>
<span class="add">+		time = self.fixhour(time+ 0.5/ 60)  # add 0.5 minutes to round</span>
<span class="add">+		hours = math.floor(time)</span>
<span class="add">+</span>
<span class="add">+		minutes = math.floor((time- hours)* 60)</span>
<span class="add">+		suffix = suffixes[ 0 if hours &lt; 12 else 1 ] if format == '12h' else ''</span>
<span class="add">+		formattedTime = "%02d:%02d" % (hours, minutes) if format == "24h" else "%d:%02d" % ((hours+11)%12+1, minutes)</span>
<span class="add">+		return formattedTime + suffix</span>
<span class="add">+</span>
<span class="add">+</span>
<span class="add">+	#---------------------- Calculation Functions -----------------------</span>
<span class="add">+</span>
<span class="add">+	# compute mid-day time</span>
<span class="add">+	def midDay(self, time):</span>
<span class="add">+		eqt = self.sunPosition(self.jDate + time)[1]</span>
<span class="add">+		return self.fixhour(12 - eqt)</span>
<span class="add">+</span>
<span class="add">+	# compute the time at which sun reaches a specific angle below horizon</span>
<span class="add">+	def sunAngleTime(self, angle, time, direction = None):</span>
<span class="add">+		try:</span>
<span class="add">+			decl = self.sunPosition(self.jDate + time)[0]</span>
<span class="add">+			noon = self.midDay(time)</span>
<span class="add">+			t = 1/15.0* self.arccos((-self.sin(angle)- self.sin(decl)* self.sin(self.lat))/</span>
<span class="add">+					(self.cos(decl)* self.cos(self.lat)))</span>
<span class="add">+			return noon+ (-t if direction == 'ccw' else t)</span>
<span class="add">+		except ValueError:</span>
<span class="add">+			return float('nan')</span>
<span class="add">+</span>
<span class="add">+	# compute asr time</span>
<span class="add">+	def asrTime(self, factor, time):</span>
<span class="add">+		decl = self.sunPosition(self.jDate + time)[0]</span>
<span class="add">+		angle = -self.arccot(factor + self.tan(abs(self.lat - decl)))</span>
<span class="add">+		return self.sunAngleTime(angle, time)</span>
<span class="add">+</span>
<span class="add">+	# compute declination angle of sun and equation of time</span>
<span class="add">+	# Ref: http://aa.usno.navy.mil/faq/docs/SunApprox.php</span>
<span class="add">+	def sunPosition(self, jd):</span>
<span class="add">+		D = jd - 2451545.0</span>
<span class="add">+		g = self.fixangle(357.529 + 0.98560028* D)</span>
<span class="add">+		q = self.fixangle(280.459 + 0.98564736* D)</span>
<span class="add">+		L = self.fixangle(q + 1.915* self.sin(g) + 0.020* self.sin(2*g))</span>
<span class="add">+</span>
<span class="add">+		R = 1.00014 - 0.01671*self.cos(g) - 0.00014*self.cos(2*g)</span>
<span class="add">+		e = 23.439 - 0.00000036* D</span>
<span class="add">+</span>
<span class="add">+		RA = self.arctan2(self.cos(e)* self.sin(L), self.cos(L))/ 15.0</span>
<span class="add">+		eqt = q/15.0 - self.fixhour(RA)</span>
<span class="add">+		decl = self.arcsin(self.sin(e)* self.sin(L))</span>
<span class="add">+</span>
<span class="add">+		return (decl, eqt)</span>
<span class="add">+</span>
<span class="add">+	# convert Gregorian date to Julian day</span>
<span class="add">+	# Ref: Astronomical Algorithms by Jean Meeus</span>
<span class="add">+	def julian(self, year, month, day):</span>
<span class="add">+		if month &lt;= 2:</span>
<span class="add">+			year -= 1</span>
<span class="add">+			month += 12</span>
<span class="add">+		A = math.floor(year / 100)</span>
<span class="add">+		B = 2 - A + math.floor(A / 4)</span>
<span class="add">+		return math.floor(365.25 * (year + 4716)) + math.floor(30.6001 * (month + 1)) + day + B - 1524.5</span>
<span class="add">+</span>
<span class="add">+</span>
<span class="add">+</span>
<span class="add">+	#---------------------- Compute Prayer Times -----------------------</span>
<span class="add">+</span>
<span class="add">+	# compute prayer times at given julian date</span>
<span class="add">+	def computePrayerTimes(self, times):</span>
<span class="add">+		times = self.dayPortion(times)</span>
<span class="add">+		params = self.settings</span>
<span class="add">+</span>
<span class="add">+		imsak   = self.sunAngleTime(self.eval(params['imsak']), times['imsak'], 'ccw')</span>
<span class="add">+		fajr    = self.sunAngleTime(self.eval(params['fajr']), times['fajr'], 'ccw')</span>
<span class="add">+		sunrise = self.sunAngleTime(self.riseSetAngle(self.elv), times['sunrise'], 'ccw')</span>
<span class="add">+		dhuhr   = self.midDay(times['dhuhr'])</span>
<span class="add">+		asr     = self.asrTime(self.asrFactor(params['asr']), times['asr'])</span>
<span class="add">+		sunset  = self.sunAngleTime(self.riseSetAngle(self.elv), times['sunset'])</span>
<span class="add">+		maghrib = self.sunAngleTime(self.eval(params['maghrib']), times['maghrib'])</span>
<span class="add">+		isha    = self.sunAngleTime(self.eval(params['isha']), times['isha'])</span>
<span class="add">+		return {</span>
<span class="add">+			'imsak': imsak, 'fajr': fajr, 'sunrise': sunrise, 'dhuhr': dhuhr,</span>
<span class="add">+			'asr': asr, 'sunset': sunset, 'maghrib': maghrib, 'isha': isha</span>
<span class="add">+		}</span>
<span class="add">+</span>
<span class="add">+	# compute prayer times</span>
<span class="add">+	def computeTimes(self):</span>
<span class="add">+		times = {</span>
<span class="add">+			'imsak': 5, 'fajr': 5, 'sunrise': 6, 'dhuhr': 12,</span>
<span class="add">+			'asr': 13, 'sunset': 18, 'maghrib': 18, 'isha': 18</span>
<span class="add">+		}</span>
<span class="add">+		# main iterations</span>
<span class="add">+		for i in range(self.numIterations):</span>
<span class="add">+			times = self.computePrayerTimes(times)</span>
<span class="add">+		times = self.adjustTimes(times)</span>
<span class="add">+		# add midnight time</span>
<span class="add">+		if self.settings['midnight'] == 'Jafari':</span>
<span class="add">+			times['midnight'] = times['maghrib'] + self.timeDiff(times['maghrib'], times['fajr']) / 2</span>
<span class="add">+		else:</span>
<span class="add">+			times['midnight'] = times['sunset'] + self.timeDiff(times['sunset'], times['sunrise']) / 2</span>
<span class="add">+</span>
<span class="add">+		times = self.tuneTimes(times)</span>
<span class="add">+		return self.modifyFormats(times)</span>
<span class="add">+</span>
<span class="add">+	# adjust times in a prayer time array</span>
<span class="add">+	def adjustTimes(self, times):</span>
<span class="add">+		params = self.settings</span>
<span class="add">+		tzAdjust = self.timeZone - self.lng / 15.0</span>
<span class="add">+		for t,v in times.items():</span>
<span class="add">+			times[t] += tzAdjust</span>
<span class="add">+</span>
<span class="add">+		if params['highLats'] != 'None':</span>
<span class="add">+			times = self.adjustHighLats(times)</span>
<span class="add">+</span>
<span class="add">+		if self.isMin(params['imsak']):</span>
<span class="add">+			times['imsak'] = times['fajr'] - self.eval(params['imsak']) / 60.0</span>
<span class="add">+		# need to ask about 'min' settings</span>
<span class="add">+		if self.isMin(params['maghrib']):</span>
<span class="add">+			times['maghrib'] = times['sunset'] - self.eval(params['maghrib']) / 60.0</span>
<span class="add">+</span>
<span class="add">+		if self.isMin(params['isha']):</span>
<span class="add">+			times['isha'] = times['maghrib'] - self.eval(params['isha']) / 60.0</span>
<span class="add">+		times['dhuhr'] += self.eval(params['dhuhr']) / 60.0</span>
<span class="add">+</span>
<span class="add">+		return times</span>
<span class="add">+</span>
<span class="add">+	# get asr shadow factor</span>
<span class="add">+	def asrFactor(self, asrParam):</span>
<span class="add">+		methods = {'Standard': 1, 'Hanafi': 2}</span>
<span class="add">+		return methods[asrParam] if asrParam in methods else self.eval(asrParam)</span>
<span class="add">+</span>
<span class="add">+	# return sun angle for sunset/sunrise</span>
<span class="add">+	def riseSetAngle(self, elevation = 0):</span>
<span class="add">+		elevation = 0 if elevation == None else elevation</span>
<span class="add">+		return 0.833 + 0.0347 * math.sqrt(elevation) # an approximation</span>
<span class="add">+</span>
<span class="add">+	# apply offsets to the times</span>
<span class="add">+	def tuneTimes(self, times):</span>
<span class="add">+		for name, value in times.items():</span>
<span class="add">+			times[name] += self.offset[name] / 60.0</span>
<span class="add">+		return times</span>
<span class="add">+</span>
<span class="add">+	# convert times to given time format</span>
<span class="add">+	def modifyFormats(self, times):</span>
<span class="add">+		for name, value in times.items():</span>
<span class="add">+			times[name] = self.getFormattedTime(times[name], self.timeFormat)</span>
<span class="add">+		return times</span>
<span class="add">+</span>
<span class="add">+	# adjust times for locations in higher latitudes</span>
<span class="add">+	def adjustHighLats(self, times):</span>
<span class="add">+		params = self.settings</span>
<span class="add">+		nightTime = self.timeDiff(times['sunset'], times['sunrise']) # sunset to sunrise</span>
<span class="add">+		times['imsak'] = self.adjustHLTime(times['imsak'], times['sunrise'], self.eval(params['imsak']), nightTime, 'ccw')</span>
<span class="add">+		times['fajr']  = self.adjustHLTime(times['fajr'], times['sunrise'], self.eval(params['fajr']), nightTime, 'ccw')</span>
<span class="add">+		times['isha']  = self.adjustHLTime(times['isha'], times['sunset'], self.eval(params['isha']), nightTime)</span>
<span class="add">+		times['maghrib'] = self.adjustHLTime(times['maghrib'], times['sunset'], self.eval(params['maghrib']), nightTime)</span>
<span class="add">+		return times</span>
<span class="add">+</span>
<span class="add">+	# adjust a time for higher latitudes</span>
<span class="add">+	def adjustHLTime(self, time, base, angle, night, direction = None):</span>
<span class="add">+		portion = self.nightPortion(angle, night)</span>
<span class="add">+		diff = self.timeDiff(time, base) if direction == 'ccw' else self.timeDiff(base, time)</span>
<span class="add">+		if math.isnan(time) or diff &gt; portion:</span>
<span class="add">+			time = base + (-portion if direction == 'ccw' else portion)</span>
<span class="add">+		return time</span>
<span class="add">+</span>
<span class="add">+	# the night portion used for adjusting times in higher latitudes</span>
<span class="add">+	def nightPortion(self, angle, night):</span>
<span class="add">+		method = self.settings['highLats']</span>
<span class="add">+		portion = 1/2.0  # midnight</span>
<span class="add">+		if method == 'AngleBased':</span>
<span class="add">+			portion = 1/60.0 * angle</span>
<span class="add">+		if method == 'OneSeventh':</span>
<span class="add">+			portion = 1/7.0</span>
<span class="add">+		return portion * night</span>
<span class="add">+</span>
<span class="add">+	# convert hours to day portions</span>
<span class="add">+	def dayPortion(self, times):</span>
<span class="add">+		for i in times:</span>
<span class="add">+			times[i] /= 24.0</span>
<span class="add">+		return times</span>
<span class="add">+</span>
<span class="add">+</span>
<span class="add">+	#---------------------- Misc Functions -----------------------</span>
<span class="add">+</span>
<span class="add">+	# compute the difference between two times</span>
<span class="add">+	def timeDiff(self, time1, time2):</span>
<span class="add">+		return self.fixhour(time2- time1)</span>
<span class="add">+</span>
<span class="add">+	# convert given string into a number</span>
<span class="add">+	def eval(self, st):</span>
<span class="add">+		val = re.split('[^0-9.+-]', str(st), 1)[0]</span>
<span class="add">+		return float(val) if val else 0</span>
<span class="add">+</span>
<span class="add">+	# detect if input contains 'min'</span>
<span class="add">+	def isMin(self, arg):</span>
<span class="add">+		return isinstance(arg, str) and arg.find('min') &gt; -1</span>
<span class="add">+</span>
<span class="add">+</span>
<span class="add">+	#----------------- Degree-Based Math Functions -------------------</span>
<span class="add">+</span>
<span class="add">+	def sin(self, d): return math.sin(math.radians(d))</span>
<span class="add">+	def cos(self, d): return math.cos(math.radians(d))</span>
<span class="add">+	def tan(self, d): return math.tan(math.radians(d))</span>
<span class="add">+</span>
<span class="add">+	def arcsin(self, x): return math.degrees(math.asin(x))</span>
<span class="add">+	def arccos(self, x): return math.degrees(math.acos(x))</span>
<span class="add">+	def arctan(self, x): return math.degrees(math.atan(x))</span>
<span class="add">+</span>
<span class="add">+	def arccot(self, x): return math.degrees(math.atan(1.0/x))</span>
<span class="add">+	def arctan2(self, y, x): return math.degrees(math.atan2(y, x))</span>
<span class="add">+</span>
<span class="add">+	def fixangle(self, angle): return self.fix(angle, 360.0)</span>
<span class="add">+	def fixhour(self, hour): return self.fix(hour, 24.0)</span>
<span class="add">+</span>
<span class="add">+	def fix(self, a, mode):</span>
<span class="add">+		if math.isnan(a):</span>
<span class="add">+			return a</span>
<span class="add">+		a = a - mode * (math.floor(a / mode))</span>
<span class="add">+		return a + mode if a &lt; 0 else a</span>
<span class="add">+</span>
<span class="add">+</span>
<span class="add">+#---------------------- prayTimes Object -----------------------</span>
<span class="add">+</span>
<span class="add">+prayTimes = PrayTimes()</span>
<span class="add">+</span>
<span class="add">+</span>
<span class="add">+#-------------------------- Test Code --------------------------</span>
<span class="add">+</span>
<span class="add">+# sample code to run in standalone mode only</span>
<span class="add">+if __name__ == "__main__":</span>
<span class="add">+	from datetime import date</span>
<span class="add">+	print('Prayer Times for today in Waterloo/Canada\n'+ ('='* 41))</span>
<span class="add">+	times = prayTimes.getTimes(date.today(), (43, -80), -5);</span>
<span class="add">+	for i in ['Fajr', 'Sunrise', 'Dhuhr', 'Asr', 'Maghrib', 'Isha']:</span>
<span class="add">+		print(i+ ': '+ times[i.lower()])</span>
<span class="add">+</span></pre>
</div>

<div class="ad"><a href="http://viewgit.sourceforge.net/" title="Visit the ViewGit homepage">ViewGit</a></div></div>
</body>
</html>
